# We are changing the log format slightly so that we can log the full DN of the client SSL certificate
log_format cert-auth '$remote_addr - $remote_user $ssl_client_s_dn [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent"';

error_log /dev/stdout info;

# from https://stackoverflow.com/questions/60888965/extract-cn-from-clients-certificate-on-nginx-ingress
# This takes the entire Distinguished Name (DN) of a client certificate and extracts
# the value of the Common Name (CN) which we use to set as the username when we proxy
# the successful authentication to OpenShift's OAuth service to get a token
map $ssl_client_s_dn $ssl_client_s_dn_cn {
    default "";
    ~CN=(?<CN>[^,]+) $CN;
}

server {
    listen                 8443 ssl;
    server_name            auth;

    access_log             /dev/stdout cert-auth;

    # This is our frontend SSL certificates
    ssl_certificate        /opt/app-root/etc/server-cert/tls.crt;
    ssl_certificate_key    /opt/app-root/etc/server-cert/tls.key;

    # This is the CA that we use to verify the client certificates
    ssl_client_certificate /opt/app-root/etc/ca.pem;
    # We have an optional verification which we can use to fall
    # through to another user/pass based authentication method (we have 
    # htpasswd set up in this configuration)
    ssl_verify_client      optional;
    # By default we only verify two levels which means we can
    # only have a single intermediary certificate (can be increased).
    ssl_verify_depth       2;

    keepalive_timeout 0;

    location / {
        return 200;
    }

    # This is the main browser-based OAuth authentication flow
    location /login-proxy/oauth/authorize {
        # If we do not verify the client certificates then we redirect over to the challenge-based
        # authentication method which uses user/pass by default
        if ($ssl_client_verify != SUCCESS) {
            rewrite /login-proxy/oauth/authorize(.*)$ /challenging-proxy/oauth/authorize$1;
        }

        # If we have successfully validated the client certificate then we set the username as the CN
        # of the certificate and proxy to the OpenShift OAuth service to get a auth token for the user
        proxy_set_header X-Remote-User $ssl_client_s_dn_cn;
        
        proxy_pass                    https://oauth-openshift.openshift-authentication.svc/oauth/authorize;
        proxy_ssl_certificate         /opt/app-root/etc/backend-cert/tls.crt;
        proxy_ssl_certificate_key     /opt/app-root/etc/backend-cert/tls.key;
        proxy_ssl_verify              off;
    }

    # This is the challenge-based OAuth authentication flow which is used when authenticating
    # with oc on the command line. We cannot use client certificates here so we use a htpasswd
    # file if it exists to do user/pass authentication
    location /challenging-proxy/oauth/authorize {
        auth_basic           "OpenShift Authentication";
        auth_basic_user_file /opt/app-root/etc/htpasswd;

        proxy_set_header X-Remote-User $remote_user;
        
        proxy_pass                    https://oauth-openshift.openshift-authentication.svc/oauth/authorize;
        proxy_ssl_certificate         /opt/app-root/etc/backend-cert/tls.crt;
        proxy_ssl_certificate_key     /opt/app-root/etc/backend-cert/tls.key;
        proxy_ssl_verify              off;
    }
}
